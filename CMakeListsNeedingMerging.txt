cmake_minimum_required(VERSION 2.8)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(ConfigSafeGuards)


project(EcoDynamo)
enable_language(CXX)

set (PROJECT_VERSION_MAJOR 1)
set (PROJECT_VERSION_MINOR 5)
=======
project(SYMBIOSES)
enable_language(C CXX Fortran)

set (PROJECT_VERSION_MAJOR 1)
set (PROJECT_VERSION_MINOR 4)

set (PROJECT_VERSION_PATCH 0)
include(ConfigProjectVersion)

option(ENABLE_TESTS "Enable test suite" OFF)

option(ENABLE_MPI "Enable MPI parallelization" OFF)
option(ENABLE_OPENMP "Enable OpenMP parallelization" OFF)
option(ENABLE_CODE_COVERAGE "Compile with code coverage turned on" OFF)
option(ENABLE_SYMBIOSES "Enable SYMBIOSES interface" ON)

include(ConfigCompilerFlags)
include(UseGlobalBuildTree)

find_package(Python REQUIRED)
if (ENABLE_SYMBIOSES)
    find_package(SYMBIOSES REQUIRED)
    include(UseCython)
    if (NOT PYTHON_SITE_INSTALL_DIR)
        set(PYTHON_SITE_INSTALL_DIR
            lib/python${PYTHON_VERSION}/site-packages/Symbioses)
    endif()
    include_directories(
        ${SYMBIOSES_INCLUDE_DIR}
        )
    add_definitions(-DHAVE_SYMBIOSES)
endif()

find_package(Eigen3)
include_directories(
    ${EIGEN3_INCLUDE_DIR}
    )
find_package(HDF5)
#find_package(NetCDF)
=======
option(ENABLE_BLAS "Use BLAS backend for linear algebra" ON)
option(ENABLE_MPI "Enable MPI parallelization" OFF)
option(ENABLE_OPENMP "Enable OpenMP parallelization" OFF)
option(ENABLE_CODE_COVERAGE "Compile with code coverage turned on" OFF)

option(ENABLE_MOCKLIBS "Enable mock libs" ON)
option(ENABLE_ECODYNAMO "Enable EcoDynamo" ON)
option(ENABLE_FVCOM "Enable FVCOM" OFF)
option(ENABLE_SINMOD "Enable SINMOD" OFF)
option(ENABLE_ROMS "Enable ROMS" OFF)
option(ENABLE_PROXIES "Enable proxy libs" OFF)

include(ConfigCompilerFlags)
include(ConfigureScript)
#include(UseGlobalBuildTree)

# Default location for SYMBIOSES input files
if (NOT SYMBIOSES_DATA_DIR)
    set (SYMBIOSES_DATA_DIR /scratch/jonas/symbioses-npi)
endif()

find_package(Python REQUIRED)
include(UseCython)
set(PYTHON_SITE_INSTALL_DIR
    lib/python${PYTHON_VERSION}/site-packages/Symbioses)

#find_package(Eigen3)
#find_package(HDF5 COMPONENTS CXX)

set (NETCDF_CXX YES)
set (NETCDF_F90 YES)
find_package(NetCDF)


if (ENABLE_MPI)
    find_package(MPI)
    if (MPI_FOUND)
<<<<<<< HEAD
        set(HAVE_MPI TRUE)
        include_directories(${MPI_INCLUDE_PATH})
        add_definitions(-DHAVE_MPI)
=======
        set(Boost_USE_MULTITHREADED OFF)
        find_package(Boost REQUIRED serialization)
#        find_package(Boost REQUIRED mpi)
        set(HAVE_MPI TRUE)
        include_directories(${MPI_INCLUDE_PATH})
>>>>>>> 86b304a7ec6f7db4d55b6281a0475cb8da388d08
    endif()
endif ()

if (ENABLE_OPENMP)
    find_package(OpenMP)
    if (OPENMP_FOUND)
        set(HAVE_OPENMP TRUE)
<<<<<<< HEAD
=======
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_Fortran_FLAGS "${CMAKE_FortranCXX_FLAGS} ${OpenMP_C_FLAGS}")
>>>>>>> 86b304a7ec6f7db4d55b6281a0475cb8da388d08
    endif()
endif ()

if (ENABLE_BLAS)
    if (BLAS_TYPE)
        find_package(BLAS COMPONENTS "${BLAS_TYPE}")
    else()
        find_package(BLAS)
    endif()
endif ()

<<<<<<< HEAD
add_subdirectory(src)

if (ENABLE_TESTS)
    set (PROJECT_REPOSITORY "git@source.uit.no:npi/ecodynamo.git")
    include(ConfigTesting)
    add_subdirectory(testing)
endif()

=======
if (NOT EXISTS ${CMAKE_BINARY_DIR}/include)
    execute_process(COMMAND
        ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/include
        OUTPUT_QUIET
        )
endif()

link_directories(${CMAKE_BINARY_DIR}/lib)
#include_directories(
#    ${PROJECT_BINARY_DIR}
#    ${PROJECT_BINARY_DIR}/include
#    ${PROJECT_BINARY_DIR}/include/fortran
#    )

>>>>>>> 86b304a7ec6f7db4d55b6281a0475cb8da388d08
include(ConfigGitRevision)

configure_file (
    ${PROJECT_SOURCE_DIR}/config.h.in
    ${PROJECT_BINARY_DIR}/config.h
    )

<<<<<<< HEAD
##########################################################
## Packaging configuration

include(GNUInstallDirs)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "EcoDynamo")
set(CPACK_PACKAGE_VENDOR "Norwegian Polar Institute")
set(CPACK_PACKAGE_CONTACT "Pedro Duarte <pedro.duarte@npolar.no>")
set(CPACK_PACKAGE_URL "http://npolar.no")
set(CPACK_PACKAGE_DESCRIPTION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/INSTALL.rst)
set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/README)
=======
add_subdirectory(modules)
add_subdirectory(src)

if (ENABLE_TESTS)
    set (PROJECT_REPOSITORY "git@source.uit.no:symbioses/symbioses-npi.git")
    include(ConfigTesting)
    add_subdirectory(testing)
endif()

find_package(Doxygen)
find_package(Sphinx)
if (DOXYGEN_FOUND OR SPHINX_FOUND)
    add_subdirectory(Documentation EXCLUDE_FROM_ALL)
endif()

##########################################################
## Packaging configuration

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "SYMBIOSES")
set(CPACK_PACKAGE_VENDOR "UiT")
set(CPACK_PACKAGE_CONTACT "Jonas Juselius <jonas.juselius@uit.no>")
set(CPACK_PACKAGE_EXECUTABLES "symbioses" "Symbioses main executable")
set(CPACK_PACKAGE_URL "http://npolar.no")
set(CPACK_PACKAGE_DESCRIPTION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/INSTALL.rst)
set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/README.rst)
>>>>>>> 86b304a7ec6f7db4d55b6281a0475cb8da388d08
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
set(CPACK_GENERATOR TGZ DEB RPM)
include(ConfigPackaging)

<<<<<<< HEAD
=======
#install(DIRECTORY
#    ${CMAKE_BINARY_DIR}/bin/
#    DESTINATION bin
#    )

#install(DIRECTORY
#    ${CMAKE_BINARY_DIR}/lib/
#    DESTINATION lib
#    )

#install(DIRECTORY
#    ${CMAKE_BINARY_DIR}/include/
#    DESTINATION include
#    )
# vim:et:sw=4:ts=4:
>>>>>>> 86b304a7ec6f7db4d55b6281a0475cb8da388d08
